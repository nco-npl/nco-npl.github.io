<!DOCTYPE html>
<!-- NAMESPACE: START -->
<html lang="ne"
	  xmlns="http://www.w3.org/1999/xhtml" 
	  xmlns:epub="http://www.idpf.org/2007/ops" 
	  xmlns:ev="http://www.w3.org/2001/xml-events"
	  xmlns:ibooks="http://apple.com/ibooks/html-extensions"
	  epub:prefix="ibooks: http://vocabulary.itunes.apple.com/rdf/ibooks/vocabulary-extensions-1.0/"
	  >
	<head>
		<meta name="generator" content="PubCoder 5.0.9.1262 for macOS" />
		<meta charset="utf-8"/>
    	<title>40</title>
		<meta name="viewport" content="width=1024, height=576" /> 
		<link rel="stylesheet" type="text/css" href="../../css/general.styles.css" />
		<link rel="stylesheet" type="text/css" href="../../css/animate.css" />
		<link rel="stylesheet" type="text/css" href="../../css/jquery-ui.min.css" />
		<link rel="stylesheet" type="text/css" href="../../css/jquery-ui.structure.min.css" />
		<link rel="stylesheet" type="text/css" href="../../css/jquery-ui.theme.min.css" />
		
		<link rel="stylesheet" type="text/css" href="styles.css" />
		



		<script type="text/javascript" src="../../js/jquery.js"></script>
<script type="text/javascript" src="../../js/spritespin.js"></script>
<script type="text/javascript" src="../../js/jquery-ui.min.js"></script>	
<script type="text/javascript" src="../../js/jquery.ui.touch-punch.js"></script>	
<script type='text/javascript' src='../../js/jquery.scrollTo.min.js'></script>
<script type='text/javascript' src='../../js/jquery.easie-min.js'></script>
<script type='text/javascript' src='../../js/jquery.move.js'></script>
<script type='text/javascript' src='../../js/jquery.SCswipe.js'></script>
<script type='text/javascript' src='../../js/jquery-css-transform.js'></script>
<script type='text/javascript' src='../../js/jquery-animate-css-rotate-scale.js'></script>
<script type='text/javascript' src='../../js/jquery.animate-shadow-min.js'></script>
<script type='text/javascript' src='../../js/jquery.animate-dropshadow.js'></script>
<script type="text/javascript" src="../../js/jquery.panzoom.min.js"></script>
<script type="text/javascript" src="../../js/underscore-min.js"></script>
<script type="text/javascript" src="../../js/remodal.js"></script>
<script type="text/javascript" src="../../js/general.functions.js"></script>
<script type="text/javascript" src="../../js/pubcoder.js"></script>
<script type="text/javascript" src="../../js/pubcoder.devicemotion.js"></script>
<script type="text/javascript" src="../../js/unmask.js"></script>
<script type="text/javascript" src="../../js/idangerous.swiper-2.3.js"></script>
<script type="text/javascript" src="../../js/photogallery.js"></script>
<script type="text/javascript" src="../../js/quiz-multi.js"></script>
<script type="text/javascript" src="../../js/drawer.js"></script>
<script type="text/javascript" src="../../js/flood_fill.js"></script>
<script type="text/javascript" src="../../js/scw_widgets.js"></script>
<script type="text/javascript" src="../../js/scw_panzoom.js"></script>
<script type="text/javascript" src="../../js/scw_memory_game.js"></script>
<script type="text/javascript" src="../../js/hammer.min.js"></script>
<script type="text/javascript" src="../../js/crossword.js"></script>
<script type="text/javascript" src="../../js/fill-in.js"></script>
<script type="text/javascript" src="../../js/trueFalse.js"></script>
<script type="text/javascript" src="../../js/matchWordWithPicture.js"></script>
<script type="text/javascript" src="../../js/xpub.js"></script>

		<script type="text/javascript">
			//<![CDATA[
			
			
			//]]>
		</script>

		

	
		

		<script type="text/javascript" src="actions.js"></script>	  		 
    </head>


    <body class="SCNoStage">
    	<div class="remodal" data-remodal-id="SCDefaultAlert" role="dialog" aria-labelledby="SCDefaultAlertTitle" aria-describedby="SCDefaultAlertMsg">
			<button data-remodal-action="close" class="remodal-close" aria-label="Close"></button>
	  		<div>
	    		<h2 id="SCDefaultAlertTitle"></h2>
	    		<p id="SCDefaultAlertMsg"></p>
			</div>
		  	<br/>
		  	<button data-remodal-action="confirm" class="remodal-confirm">OK</button>
		</div>
		<div class="remodal" data-remodal-id="SCDefaultConfirmDialog" role="dialog" aria-labelledby="SCDefaultConfirmDialogTitle" aria-describedby="SCDefaultConfirmDialogMsg">
	  		<div>
	    		<h2 id="SCDefaultConfirmDialogTitle"></h2>
	    		<p id="SCDefaultConfirmDialogMsg"></p>
			</div>
		  	<br/>
		  	<button id="SCDefaultConfirmDialogTitleConfirmBtn" data-remodal-action="confirm" class="remodal-confirm">OK</button>
		  	<button id="SCDefaultConfirmDialogTitleCancelBtn" data-remodal-action="cancel" class="remodal-cancel">Cancel</button>
		</div>
		
		<div id="SCPage" class="SCPage SCPage40 SCPage-w-1024 SCPage-h-576" dir="ltr">
			<div id="SCAnchors">
				

<a id="anchor368" href="../41/page.xhtml" data-src="">anchor</a>
<a id="anchor369" href="../39/page.xhtml" data-src="">anchor</a>
			</div>
			<div id="SCFirstFakeReadAloudDiv">
				<span id="SCFirstFakeReadAloud"></span>
			</div>
			<div class="SCOverlay SCOverlay40">
				
<div id="obj3940" class="SCPageObject SCView SCRectangle"   ></div>
<div id="obj3930" class="SCPageObject SCView SCImage focusable t3 SCEvent SCPointerEvent SCEvent-onTap SCEvent-SCEventReadAloudStarted SCEvent-SCEventReadAloudStopped"  >
<img id="obj3930_img" src="../images/obj3930_image.png"  alt="Voice Over" onclick="XPUB.startStopReadAloud(event);" />
</div>
<div id="obj3923" class="SCPageObject SCView SCImage focusable t4 SCEvent SCPointerEvent SCEvent-onTap"  >
<img id="obj3923_img" src="../images/obj3923_image.png"  alt="Sign Language Video" />
</div>
<div id="obj3919" class="SCPageObject SCView SCImage t5 SCEvent SCPointerEvent SCEvent-onTap"  >
<img id="obj3919_img" src="../images/obj3919_image.png"  alt="Readaloud Image" />
</div>
<div id="obj3916" class="SCPageObject SCView SCImage focusable t1 SCEvent SCPointerEvent SCEvent-onTap"  >
<img id="obj3916_img" src="../images/obj3916_image.png"  alt="Next Page" />
</div>
<div id="obj3913" class="SCPageObject SCView SCImage focusable t2 SCEvent SCPointerEvent SCEvent-onTap"  >
<img id="obj3913_img" src="../images/obj3913_image.png"  alt="Previous Page" />
</div>
<div id="obj3904" class="SCPageObject SCView SCImage focusable t3 SCEvent SCPointerEvent SCEvent-onTouchUp"  >
<img id="obj3904_img" src="../images/obj3904_image.png"  alt="Index" />
</div>
<div id="obj3897" class="SCPageObject SCView SCImage focusable t4"  >
<img id="obj3897_img" src="../images/obj3897_image.png"  alt="Information" />
</div>









			</div>
			
			<div class="SCContentOverlay">
				









			</div>
			<div class="SCContent">
				
<div id="obj4062" class="SCPageObject SCView SCRectangle"   ></div>

<div id="obj3767" class="SCPageObject SCView SCText bgwhite fpink"   >
	<div id="obj3767_content" class="SCTextContainer SCTextVAlignTop">
<h2><span style="font-size: 26px;"><strong><span lang="EN-US">(ङ)    </span></strong>खाली  ठाउँ    भर्नुहोस्‌.  :</span></h2>
	</div>
</div>
<div id="obj3790" class="SCPageObject SCView SCText bgwhite fblue"   >
	<div id="obj3790_content" class="SCTextContainer SCTextVAlignTop">
<h2><span style="font-size: 26px;"><strong><span lang="EN-US">(च)   आवाज निकाल्ने वस्तुहरुको नाम लेख्नुहोस् । जस्तै : </span></strong></span></h2>
	</div>
</div>
<div id="obj4170" class="SCPageObject SCView SCText"   >
	<div id="obj4170_content" class="SCTextContainer SCTextVAlignTop">
<p style="text-align: center;"><span style="font-size: 28px;"><strong>४९-२</strong></span></p>
	</div>
</div>
<div id="obj3784" class="SCPageObject SCView SCSmartObject"   >
	<iframe style="border: 0; width: 100%; height: 100%;" srcdoc="&lt;html style=&quot;min-height: 100%&quot;&gt;&lt;head&gt;&lt;/head&gt;&lt;body style=&quot;min-height: 100%; margin: 0; padding: 0;&quot; style=&quot;overflow:hidden;&quot; &gt;&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;script&gt;
    const CONFIG = {
      exercise: {
        template: &quot;&#2361;&#2366;&#2350;&#2368;&#2354;&#2375; &#2325;&#2369;&#2352;&#2366; &#2327;&#2352;&#2381;&#2342;&#2366; &#2350;&#2369;&#2326;&#2348;&#2366;&#2335; {{&#2310;&#2357;&#2366;&#2332;}} &#2344;&#2367;&#2360;&#2381;&#2325;&#2344;&#2381;&#2331;&#2404;&quot;,
        answers: [&quot;&#2310;&#2357;&#2366;&#2332;&quot;],
        distractors: [ &quot;&#2326;&#2366;&#2344;&#2375;&#2325;&#2369;&#2352;&#2366;&quot;]
      },
      style: {
        colors: {
          primary: &quot;#4A90E2&quot;,
          correct: &quot;#d4edda&quot;,
          incorrect: &quot;#f8d7da&quot;,
          wordBackground: &quot;#f0f0f0&quot;,
          wordBorder: &quot;#ccc&quot;
        },
        sizes: {
          fontSize: &quot;26px&quot;,
          blankWidth: &quot;100px&quot;,
          blankHeight: &quot;30px&quot;,
          wordPadding: &quot;4px 12px&quot;
        }
      },
      messages: {
        allCorrect: &quot;&#9989; All answers are correct!&quot;,
        someIncorrect: &quot;&#10060; Some answers are incorrect.&quot;,
        instructions: &quot;Complete the sentence by moving the words into the blank spaces.&quot;
      }
    };
    function applyConfiguration() {
      const root = document.documentElement;
      
      root.style.setProperty(&#39;--primary-color&#39;, CONFIG.style.colors.primary);
      root.style.setProperty(&#39;--correct-color&#39;, CONFIG.style.colors.correct);
      root.style.setProperty(&#39;--incorrect-color&#39;, CONFIG.style.colors.incorrect);
      root.style.setProperty(&#39;--word-bg-color&#39;, CONFIG.style.colors.wordBackground);
      root.style.setProperty(&#39;--word-border-color&#39;, CONFIG.style.colors.wordBorder);
      
      root.style.setProperty(&#39;--font-size&#39;, CONFIG.style.sizes.fontSize);
      root.style.setProperty(&#39;--blank-width&#39;, CONFIG.style.sizes.blankWidth);
      root.style.setProperty(&#39;--blank-height&#39;, CONFIG.style.sizes.blankHeight);
      root.style.setProperty(&#39;--word-padding&#39;, CONFIG.style.sizes.wordPadding);
    }
  &lt;/script&gt;
  &lt;style&gt;
    :root {
      --primary-color: #4A90E2;
      --correct-color: #d4edda;
      --incorrect-color: #f8d7da;
      --word-bg-color: #f0f0f0;
      --word-border-color: #ccc;
      --font-size: 18px;
      --blank-width: 100px;
      --blank-height: 30px;
      --word-padding: 4px 12px;
    }
    body {
      font-family: Arial, sans-serif;
      padding: 30px;
    }
    .sentence {
      font-size: var(--font-size);
      margin: 0px;
    }
    .blank {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: var(--blank-width);
      height: var(--blank-height);
      border: 2px dashed var(--word-border-color);
      vertical-align: middle;
      margin: 0 5px;
      padding: 2px;
    }
    .word {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: var(--word-padding);
      margin: 10px 0;
      background-color: var(--word-bg-color);
      border: 1px solid var(--word-border-color);
      cursor: grab;
      height: 24px;
      min-width: 60px;
      vertical-align: middle;
    }
    .word:focus {
      outline: 3px solid var(--primary-color);
      border-color: var(--primary-color);
    }
    .blank:focus {
      outline: 3px solid var(--primary-color);
      border-color: var(--primary-color);
    }
    .blank .word {
      margin: 0;
      width: 100%;
      height: 100%;
      padding: 2px;
      border: none;
      background-color: transparent;
    }
    .correct {
      border-color: green;
      background-color: var(--correct-color);
    }
    .incorrect {
      border-color: red;
      background-color: var(--incorrect-color);
    }
    
    .result-block {
        display:flex; 
        flex-direction: row;
        align-items: baseline;
    }
    #result {
      margin-top: 20px;
      margin-left: 20px;
      font-weight: bold;
    }
    .sr-only {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      border: 0;
    }
    .instructions {
      background-color: #f8f9fa;
      padding: 15px;
      margin-bottom: 20px;
      border-radius: 5px;
    }
    .exercise-container {
      display: flex;
      align-items: flex-start;
      gap: 40px;
    }
    .sentence-area {
      flex: 1;
    }
    .word-bank {
      min-width: 180px;
      display: flex;
      flex-direction: row;
      align-items: flex-start;
      background: #b6d4f2;
      padding: 5px;
      border-radius: 8px;
      gap: 5px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.03);
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div class=&quot;instructions&quot; role=&quot;region&quot; aria-label=&quot;Instructions&quot; style=&quot;display:none;&quot;&gt;
    &lt;h2&gt;Instructions&lt;/h2&gt;
    &lt;p id=&quot;instructions-text&quot;&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Use Tab key to navigate between words and blank spaces&lt;/li&gt;
      &lt;li&gt;Press Enter or Space to select a word&lt;/li&gt;
      &lt;li&gt;Use arrow keys to choose a destination&lt;/li&gt;
      &lt;li&gt;Press Enter or Space again to place the word&lt;/li&gt;
      &lt;li&gt;Press Escape to cancel moving a word&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div role=&quot;main&quot;&gt;
    &lt;div class=&quot;exercise-container&quot;&gt;
      &lt;div class=&quot;sentence-area&quot;&gt;
        &lt;p id=&quot;sentence&quot; class=&quot;sentence&quot; role=&quot;group&quot; aria-label=&quot;Fill in the blank sentence&quot;&gt;&lt;/p&gt;
        &lt;div class=&quot;result-block&quot; &gt;
        &lt;button onclick=&quot;checkAnswers()&quot;&gt;Check Answers&lt;/button&gt;
        &lt;div id=&quot;result&quot; role=&quot;alert&quot; aria-live=&quot;polite&quot;&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div id=&quot;word-bank&quot; class=&quot;word-bank&quot; role=&quot;region&quot; aria-label=&quot;Available words&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;script&gt;
    let selectedWord = null;
    let originalPosition = null;
    function initializeAccessibility() {
      const words = document.querySelectorAll(&#39;.word&#39;);
      const blanks = document.querySelectorAll(&#39;.blank&#39;);
      words.forEach(word =&gt; {
        word.addEventListener(&#39;keydown&#39;, handleWordKeydown);
        word.addEventListener(&#39;click&#39;, handleWordClick);
      });
      blanks.forEach(blank =&gt; {
        blank.addEventListener(&#39;keydown&#39;, handleBlankKeydown);
        blank.addEventListener(&#39;click&#39;, handleBlankClick);
        blank.addEventListener(&#39;DOMNodeInserted&#39;, (event) =&gt; {
          if (event.target.classList.contains(&#39;word&#39;)) {
            event.target.addEventListener(&#39;click&#39;, (e) =&gt; {
              e.stopPropagation();
              resetWord(event.target);
            });
          }
        });
      });
    }
    function handleWordClick(event) {
      const word = event.target;
      if (!selectedWord &amp;&amp; word.classList.contains(&#39;word&#39;)) {
        selectWord(word);
      }
    }
    function handleBlankClick(event) {
      const blank = event.target;
      if (event.target.classList.contains(&#39;word&#39;)) {
        resetWord(event.target);
        return;
      }
      
      if (blank.classList.contains(&#39;blank&#39;)) {
        if (selectedWord) {
          dropWord(blank);
        } else if (blank.hasChildNodes()) {
          resetWord(blank.firstChild);
        }
      }
    }
    function handleWordKeydown(event) {
      if ((event.key === &#39;Enter&#39; || event.key === &#39; &#39;) &amp;&amp; !selectedWord) {
        event.preventDefault();
        const word = event.target;
        if (word.classList.contains(&#39;word&#39;)) {
          selectWord(word);
        }
      }
    }
    function handleBlankKeydown(event) {
      if (event.key === &#39;Enter&#39; || event.key === &#39; &#39;) {
        event.preventDefault();
        const blank = event.target;
        if (selectedWord) {
          dropWord(blank);
        } else if (blank.hasChildNodes()) {
          resetWord(blank.firstChild);
        }
      }
    }
    function resetWord(word) {
      if (word &amp;&amp; word.classList.contains(&#39;word&#39;)) {
        const wordBank = document.querySelector(&#39;[aria-label=&quot;Available words&quot;]&#39;);
        if (wordBank) {
          wordBank.appendChild(word);
          word.style.opacity = &#39;1&#39;;
          word.setAttribute(&#39;aria-grabbed&#39;, &#39;false&#39;);
          word.setAttribute(&#39;draggable&#39;, &#39;true&#39;);
          
          if (selectedWord === word) {
            selectedWord = null;
          }
          
          const parentBlank = word.closest(&#39;.blank&#39;);
          if (parentBlank) {
            parentBlank.classList.remove(&#39;correct&#39;, &#39;incorrect&#39;);
          }
          
          announceToScreenReader(`Removed word ${word.textContent} back to word bank`);
        }
      }
    }
    function selectWord(word) {
      if (selectedWord) {
        selectedWord.setAttribute(&#39;aria-grabbed&#39;, &#39;false&#39;);
        selectedWord.style.opacity = &#39;1&#39;;
      }
      selectedWord = word;
      originalPosition = word.parentNode;
      word.setAttribute(&#39;aria-grabbed&#39;, &#39;true&#39;);
      word.style.opacity = &#39;0.6&#39;;
      
      announceToScreenReader(`Selected word: ${word.textContent}. Use tab to navigate to a blank space and press Enter to place the word.`);
    }
    function dropWord(target) {
      if (selectedWord &amp;&amp; target.classList.contains(&#39;blank&#39;)) {
        if (target.hasChildNodes()) {
          resetWord(target.firstChild);
        }
        
        target.appendChild(selectedWord);
        selectedWord.style.opacity = &#39;1&#39;;
        selectedWord.setAttribute(&#39;aria-grabbed&#39;, &#39;false&#39;);
        
        selectedWord.addEventListener(&#39;click&#39;, (e) =&gt; {
          e.stopPropagation();
          resetWord(selectedWord);
        });
        
        announceToScreenReader(`Placed word ${selectedWord.textContent} in blank`);
        selectedWord = null;
      }
    }
    document.addEventListener(&#39;keydown&#39;, function(event) {
      if (event.key === &#39;Escape&#39; &amp;&amp; selectedWord) {
        selectedWord.style.opacity = &#39;1&#39;;
        selectedWord.setAttribute(&#39;aria-grabbed&#39;, &#39;false&#39;);
        
        if (originalPosition &amp;&amp; selectedWord.parentNode !== originalPosition) {
          originalPosition.appendChild(selectedWord);
        }
        
        selectedWord = null;
        announceToScreenReader(&#39;Selection cancelled&#39;);
      }
    });
    function initializeDragAndDrop() {
      const words = document.querySelectorAll(&#39;.word&#39;);
      const blanks = document.querySelectorAll(&#39;.blank&#39;);
      words.forEach(word =&gt; {
        word.setAttribute(&#39;draggable&#39;, &#39;true&#39;);
        word.addEventListener(&#39;dragstart&#39;, dragStart);
      });
      blanks.forEach(blank =&gt; {
        blank.addEventListener(&#39;dragover&#39;, dragOver);
        blank.addEventListener(&#39;drop&#39;, drop);
      });
    }
    function dragStart(event) {
      event.dataTransfer.setData(&#39;text/plain&#39;, event.target.id);
      selectedWord = event.target;
      originalPosition = event.target.parentNode;
    }
    function dragOver(event) {
      event.preventDefault();
    }
    function drop(event) {
      event.preventDefault();
      const target = event.target;
      
      if (target.classList.contains(&#39;blank&#39;)) {
        if (target.hasChildNodes()) {
          resetWord(target.firstChild);
        }
        target.appendChild(selectedWord);
        selectedWord = null;
      }
    }
    function announceToScreenReader(message) {
      const announcement = document.createElement(&#39;div&#39;);
      announcement.setAttribute(&#39;aria-live&#39;, &#39;assertive&#39;);
      announcement.classList.add(&#39;sr-only&#39;);
      announcement.textContent = message;
      document.body.appendChild(announcement);
      setTimeout(() =&gt; {
        document.body.removeChild(announcement);
      }, 1000);
    }
    function checkAnswers() {
      let blanks = document.querySelectorAll(&#39;.blank&#39;);
      let correct = 0;
      blanks.forEach((blank, index) =&gt; {
        const answer = blank.dataset.answer;
        const word = blank.firstChild ? blank.firstChild.textContent.trim() : &#39;&#39;;
        if (word.toLowerCase() === answer) {
          blank.classList.add(&#39;correct&#39;);
          blank.classList.remove(&#39;incorrect&#39;);
          correct++;
        } else {
          blank.classList.add(&#39;incorrect&#39;);
          blank.classList.remove(&#39;correct&#39;);
        }
      });
      const result = document.getElementById(&#39;result&#39;);
      const message = correct === blanks.length ? 
        CONFIG.messages.allCorrect : 
        CONFIG.messages.someIncorrect;
      
      result.textContent = message;
    }
    function shuffleArray(array) {
      for (let i = array.length - 1; i &gt; 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
      }
      return array;
    }
    function initializeExercise() {
      applyConfiguration();
      
      document.getElementById(&#39;instructions-text&#39;).textContent = CONFIG.messages.instructions;
      const sentence = document.getElementById(&#39;sentence&#39;);
      let blankIndex = 0;
      const sentenceHtml = CONFIG.exercise.template.replace(/\{\{([^}]+)\}\}/g, (match, answer) =&gt; {
        return `&lt;span class=&quot;blank&quot; 
                      role=&quot;textbox&quot; 
                      tabindex=&quot;0&quot; 
                      aria-label=&quot;Blank space ${blankIndex + 1}&quot; 
                      data-answer=&quot;${CONFIG.exercise.answers[blankIndex++]}&quot;&gt;&lt;/span&gt;`;
      });
      sentence.innerHTML = sentenceHtml;
      const wordBank = document.getElementById(&#39;word-bank&#39;);
      const allWords = shuffleArray([...CONFIG.exercise.answers, ...CONFIG.exercise.distractors]);
      
      allWords.forEach((word, index) =&gt; {
        const wordElement = document.createElement(&#39;div&#39;);
        wordElement.className = &#39;word&#39;;
        wordElement.setAttribute(&#39;role&#39;, &#39;button&#39;);
        wordElement.setAttribute(&#39;tabindex&#39;, &#39;0&#39;);
        wordElement.setAttribute(&#39;aria-grabbed&#39;, &#39;false&#39;);
        wordElement.id = `word${index + 1}`;
        wordElement.textContent = word;
        wordBank.appendChild(wordElement);
      });
      initializeAccessibility();
      initializeDragAndDrop();
    }
    window.addEventListener(&#39;load&#39;, initializeExercise);
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;/body&gt;&lt;/html&gt;"></iframe>
</div>
<div id="obj3786" class="SCPageObject SCView SCSmartObject"   >
	<iframe style="border: 0; width: 100%; height: 100%;" srcdoc="&lt;html style=&quot;min-height: 100%&quot;&gt;&lt;head&gt;&lt;/head&gt;&lt;body style=&quot;min-height: 100%; margin: 0; padding: 0;&quot; style=&quot;overflow:hidden;&quot; &gt;&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;script&gt;
    const CONFIG = {
      exercise: {
        template: &quot;&#2330;&#2352;&#2381;&#2325;&#2379; &#2310;&#2357;&#2366;&#2332;&#2354;&#2375; &#2325;&#2366;&#2344;&#2354;&#2366;&#2312; &#2309;&#2360;&#2352; {{&#2346;&#2366;&#2352;&#2381;&#2331;}}&#2404;&quot;,
        answers: [&quot;&#2346;&#2366;&#2352;&#2381;&#2331;&quot;],
        distractors: [ &quot;&#2346;&#2366;&#2352;&#2381;&#2342;&#2376;&#2344;&quot;]
      },
      style: {
        colors: {
          primary: &quot;#4A90E2&quot;,
          correct: &quot;#d4edda&quot;,
          incorrect: &quot;#f8d7da&quot;,
          wordBackground: &quot;#f0f0f0&quot;,
          wordBorder: &quot;#ccc&quot;
        },
        sizes: {
          fontSize: &quot;26px&quot;,
          blankWidth: &quot;100px&quot;,
          blankHeight: &quot;30px&quot;,
          wordPadding: &quot;4px 12px&quot;
        }
      },
      messages: {
        allCorrect: &quot;&#9989; All answers are correct!&quot;,
        someIncorrect: &quot;&#10060; Some answers are incorrect.&quot;,
        instructions: &quot;Complete the sentence by moving the words into the blank spaces.&quot;
      }
    };
    function applyConfiguration() {
      const root = document.documentElement;
      
      root.style.setProperty(&#39;--primary-color&#39;, CONFIG.style.colors.primary);
      root.style.setProperty(&#39;--correct-color&#39;, CONFIG.style.colors.correct);
      root.style.setProperty(&#39;--incorrect-color&#39;, CONFIG.style.colors.incorrect);
      root.style.setProperty(&#39;--word-bg-color&#39;, CONFIG.style.colors.wordBackground);
      root.style.setProperty(&#39;--word-border-color&#39;, CONFIG.style.colors.wordBorder);
      
      root.style.setProperty(&#39;--font-size&#39;, CONFIG.style.sizes.fontSize);
      root.style.setProperty(&#39;--blank-width&#39;, CONFIG.style.sizes.blankWidth);
      root.style.setProperty(&#39;--blank-height&#39;, CONFIG.style.sizes.blankHeight);
      root.style.setProperty(&#39;--word-padding&#39;, CONFIG.style.sizes.wordPadding);
    }
  &lt;/script&gt;
  &lt;style&gt;
    :root {
      --primary-color: #4A90E2;
      --correct-color: #d4edda;
      --incorrect-color: #f8d7da;
      --word-bg-color: #f0f0f0;
      --word-border-color: #ccc;
      --font-size: 18px;
      --blank-width: 100px;
      --blank-height: 30px;
      --word-padding: 4px 12px;
    }
    body {
      font-family: Arial, sans-serif;
      padding: 30px;
    }
    .sentence {
      font-size: var(--font-size);
      margin: 0px;
    }
    .blank {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: var(--blank-width);
      height: var(--blank-height);
      border: 2px dashed var(--word-border-color);
      vertical-align: middle;
      margin: 0 5px;
      padding: 2px;
    }
    .word {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: var(--word-padding);
      margin: 10px 0;
      background-color: var(--word-bg-color);
      border: 1px solid var(--word-border-color);
      cursor: grab;
      height: 24px;
      min-width: 60px;
      vertical-align: middle;
    }
    .word:focus {
      outline: 3px solid var(--primary-color);
      border-color: var(--primary-color);
    }
    .blank:focus {
      outline: 3px solid var(--primary-color);
      border-color: var(--primary-color);
    }
    .blank .word {
      margin: 0;
      width: 100%;
      height: 100%;
      padding: 2px;
      border: none;
      background-color: transparent;
    }
    .correct {
      border-color: green;
      background-color: var(--correct-color);
    }
    .incorrect {
      border-color: red;
      background-color: var(--incorrect-color);
    }
    
    .result-block {
        display:flex; 
        flex-direction: row;
        align-items: baseline;
    }
    #result {
      margin-top: 20px;
      margin-left: 20px;
      font-weight: bold;
    }
    .sr-only {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      border: 0;
    }
    .instructions {
      background-color: #f8f9fa;
      padding: 15px;
      margin-bottom: 20px;
      border-radius: 5px;
    }
    .exercise-container {
      display: flex;
      align-items: flex-start;
      gap: 40px;
    }
    .sentence-area {
      flex: 1;
    }
    .word-bank {
      min-width: 180px;
      display: flex;
      flex-direction: row;
      align-items: flex-start;
      background: #b6d4f2;
      padding: 5px;
      border-radius: 8px;
      gap: 5px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.03);
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div class=&quot;instructions&quot; role=&quot;region&quot; aria-label=&quot;Instructions&quot; style=&quot;display:none;&quot;&gt;
    &lt;h2&gt;Instructions&lt;/h2&gt;
    &lt;p id=&quot;instructions-text&quot;&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Use Tab key to navigate between words and blank spaces&lt;/li&gt;
      &lt;li&gt;Press Enter or Space to select a word&lt;/li&gt;
      &lt;li&gt;Use arrow keys to choose a destination&lt;/li&gt;
      &lt;li&gt;Press Enter or Space again to place the word&lt;/li&gt;
      &lt;li&gt;Press Escape to cancel moving a word&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div role=&quot;main&quot;&gt;
    &lt;div class=&quot;exercise-container&quot;&gt;
      &lt;div class=&quot;sentence-area&quot;&gt;
        &lt;p id=&quot;sentence&quot; class=&quot;sentence&quot; role=&quot;group&quot; aria-label=&quot;Fill in the blank sentence&quot;&gt;&lt;/p&gt;
        &lt;div class=&quot;result-block&quot; &gt;
        &lt;button onclick=&quot;checkAnswers()&quot;&gt;Check Answers&lt;/button&gt;
        &lt;div id=&quot;result&quot; role=&quot;alert&quot; aria-live=&quot;polite&quot;&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div id=&quot;word-bank&quot; class=&quot;word-bank&quot; role=&quot;region&quot; aria-label=&quot;Available words&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;script&gt;
    let selectedWord = null;
    let originalPosition = null;
    function initializeAccessibility() {
      const words = document.querySelectorAll(&#39;.word&#39;);
      const blanks = document.querySelectorAll(&#39;.blank&#39;);
      words.forEach(word =&gt; {
        word.addEventListener(&#39;keydown&#39;, handleWordKeydown);
        word.addEventListener(&#39;click&#39;, handleWordClick);
      });
      blanks.forEach(blank =&gt; {
        blank.addEventListener(&#39;keydown&#39;, handleBlankKeydown);
        blank.addEventListener(&#39;click&#39;, handleBlankClick);
        blank.addEventListener(&#39;DOMNodeInserted&#39;, (event) =&gt; {
          if (event.target.classList.contains(&#39;word&#39;)) {
            event.target.addEventListener(&#39;click&#39;, (e) =&gt; {
              e.stopPropagation();
              resetWord(event.target);
            });
          }
        });
      });
    }
    function handleWordClick(event) {
      const word = event.target;
      if (!selectedWord &amp;&amp; word.classList.contains(&#39;word&#39;)) {
        selectWord(word);
      }
    }
    function handleBlankClick(event) {
      const blank = event.target;
      if (event.target.classList.contains(&#39;word&#39;)) {
        resetWord(event.target);
        return;
      }
      
      if (blank.classList.contains(&#39;blank&#39;)) {
        if (selectedWord) {
          dropWord(blank);
        } else if (blank.hasChildNodes()) {
          resetWord(blank.firstChild);
        }
      }
    }
    function handleWordKeydown(event) {
      if ((event.key === &#39;Enter&#39; || event.key === &#39; &#39;) &amp;&amp; !selectedWord) {
        event.preventDefault();
        const word = event.target;
        if (word.classList.contains(&#39;word&#39;)) {
          selectWord(word);
        }
      }
    }
    function handleBlankKeydown(event) {
      if (event.key === &#39;Enter&#39; || event.key === &#39; &#39;) {
        event.preventDefault();
        const blank = event.target;
        if (selectedWord) {
          dropWord(blank);
        } else if (blank.hasChildNodes()) {
          resetWord(blank.firstChild);
        }
      }
    }
    function resetWord(word) {
      if (word &amp;&amp; word.classList.contains(&#39;word&#39;)) {
        const wordBank = document.querySelector(&#39;[aria-label=&quot;Available words&quot;]&#39;);
        if (wordBank) {
          wordBank.appendChild(word);
          word.style.opacity = &#39;1&#39;;
          word.setAttribute(&#39;aria-grabbed&#39;, &#39;false&#39;);
          word.setAttribute(&#39;draggable&#39;, &#39;true&#39;);
          
          if (selectedWord === word) {
            selectedWord = null;
          }
          
          const parentBlank = word.closest(&#39;.blank&#39;);
          if (parentBlank) {
            parentBlank.classList.remove(&#39;correct&#39;, &#39;incorrect&#39;);
          }
          
          announceToScreenReader(`Removed word ${word.textContent} back to word bank`);
        }
      }
    }
    function selectWord(word) {
      if (selectedWord) {
        selectedWord.setAttribute(&#39;aria-grabbed&#39;, &#39;false&#39;);
        selectedWord.style.opacity = &#39;1&#39;;
      }
      selectedWord = word;
      originalPosition = word.parentNode;
      word.setAttribute(&#39;aria-grabbed&#39;, &#39;true&#39;);
      word.style.opacity = &#39;0.6&#39;;
      
      announceToScreenReader(`Selected word: ${word.textContent}. Use tab to navigate to a blank space and press Enter to place the word.`);
    }
    function dropWord(target) {
      if (selectedWord &amp;&amp; target.classList.contains(&#39;blank&#39;)) {
        if (target.hasChildNodes()) {
          resetWord(target.firstChild);
        }
        
        target.appendChild(selectedWord);
        selectedWord.style.opacity = &#39;1&#39;;
        selectedWord.setAttribute(&#39;aria-grabbed&#39;, &#39;false&#39;);
        
        selectedWord.addEventListener(&#39;click&#39;, (e) =&gt; {
          e.stopPropagation();
          resetWord(selectedWord);
        });
        
        announceToScreenReader(`Placed word ${selectedWord.textContent} in blank`);
        selectedWord = null;
      }
    }
    document.addEventListener(&#39;keydown&#39;, function(event) {
      if (event.key === &#39;Escape&#39; &amp;&amp; selectedWord) {
        selectedWord.style.opacity = &#39;1&#39;;
        selectedWord.setAttribute(&#39;aria-grabbed&#39;, &#39;false&#39;);
        
        if (originalPosition &amp;&amp; selectedWord.parentNode !== originalPosition) {
          originalPosition.appendChild(selectedWord);
        }
        
        selectedWord = null;
        announceToScreenReader(&#39;Selection cancelled&#39;);
      }
    });
    function initializeDragAndDrop() {
      const words = document.querySelectorAll(&#39;.word&#39;);
      const blanks = document.querySelectorAll(&#39;.blank&#39;);
      words.forEach(word =&gt; {
        word.setAttribute(&#39;draggable&#39;, &#39;true&#39;);
        word.addEventListener(&#39;dragstart&#39;, dragStart);
      });
      blanks.forEach(blank =&gt; {
        blank.addEventListener(&#39;dragover&#39;, dragOver);
        blank.addEventListener(&#39;drop&#39;, drop);
      });
    }
    function dragStart(event) {
      event.dataTransfer.setData(&#39;text/plain&#39;, event.target.id);
      selectedWord = event.target;
      originalPosition = event.target.parentNode;
    }
    function dragOver(event) {
      event.preventDefault();
    }
    function drop(event) {
      event.preventDefault();
      const target = event.target;
      
      if (target.classList.contains(&#39;blank&#39;)) {
        if (target.hasChildNodes()) {
          resetWord(target.firstChild);
        }
        target.appendChild(selectedWord);
        selectedWord = null;
      }
    }
    function announceToScreenReader(message) {
      const announcement = document.createElement(&#39;div&#39;);
      announcement.setAttribute(&#39;aria-live&#39;, &#39;assertive&#39;);
      announcement.classList.add(&#39;sr-only&#39;);
      announcement.textContent = message;
      document.body.appendChild(announcement);
      setTimeout(() =&gt; {
        document.body.removeChild(announcement);
      }, 1000);
    }
    function checkAnswers() {
      let blanks = document.querySelectorAll(&#39;.blank&#39;);
      let correct = 0;
      blanks.forEach((blank, index) =&gt; {
        const answer = blank.dataset.answer;
        const word = blank.firstChild ? blank.firstChild.textContent.trim() : &#39;&#39;;
        if (word.toLowerCase() === answer) {
          blank.classList.add(&#39;correct&#39;);
          blank.classList.remove(&#39;incorrect&#39;);
          correct++;
        } else {
          blank.classList.add(&#39;incorrect&#39;);
          blank.classList.remove(&#39;correct&#39;);
        }
      });
      const result = document.getElementById(&#39;result&#39;);
      const message = correct === blanks.length ? 
        CONFIG.messages.allCorrect : 
        CONFIG.messages.someIncorrect;
      
      result.textContent = message;
    }
    function shuffleArray(array) {
      for (let i = array.length - 1; i &gt; 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
      }
      return array;
    }
    function initializeExercise() {
      applyConfiguration();
      
      document.getElementById(&#39;instructions-text&#39;).textContent = CONFIG.messages.instructions;
      const sentence = document.getElementById(&#39;sentence&#39;);
      let blankIndex = 0;
      const sentenceHtml = CONFIG.exercise.template.replace(/\{\{([^}]+)\}\}/g, (match, answer) =&gt; {
        return `&lt;span class=&quot;blank&quot; 
                      role=&quot;textbox&quot; 
                      tabindex=&quot;0&quot; 
                      aria-label=&quot;Blank space ${blankIndex + 1}&quot; 
                      data-answer=&quot;${CONFIG.exercise.answers[blankIndex++]}&quot;&gt;&lt;/span&gt;`;
      });
      sentence.innerHTML = sentenceHtml;
      const wordBank = document.getElementById(&#39;word-bank&#39;);
      const allWords = shuffleArray([...CONFIG.exercise.answers, ...CONFIG.exercise.distractors]);
      
      allWords.forEach((word, index) =&gt; {
        const wordElement = document.createElement(&#39;div&#39;);
        wordElement.className = &#39;word&#39;;
        wordElement.setAttribute(&#39;role&#39;, &#39;button&#39;);
        wordElement.setAttribute(&#39;tabindex&#39;, &#39;0&#39;);
        wordElement.setAttribute(&#39;aria-grabbed&#39;, &#39;false&#39;);
        wordElement.id = `word${index + 1}`;
        wordElement.textContent = word;
        wordBank.appendChild(wordElement);
      });
      initializeAccessibility();
      initializeDragAndDrop();
    }
    window.addEventListener(&#39;load&#39;, initializeExercise);
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;/body&gt;&lt;/html&gt;"></iframe>
</div>
<div id="obj3788" class="SCPageObject SCView SCSmartObject"   >
	<iframe style="border: 0; width: 100%; height: 100%;" srcdoc="&lt;html style=&quot;min-height: 100%&quot;&gt;&lt;head&gt;&lt;/head&gt;&lt;body style=&quot;min-height: 100%; margin: 0; padding: 0;&quot; style=&quot;overflow:hidden;&quot; &gt;&lt;form&gt;
	&lt;label for=&quot;name&quot;&gt;&lt;/label&gt;
    &lt;textarea type=&quot;text&quot; style=&quot;font-size: 20px&quot; id=&quot;name&quot; rows=5 cols=50 name=&quot;name&quot; value=&quot;&#2328;&#2344;&#2381;&#2335;&#2368;&quot; placeholder=&quot;&#2351;&#2361;&#2366;&#2305; &#2344;&#2366;&#2350; &#2354;&#2375;&#2326;&#2381;&#2344;&#2369;&#2361;&#2379;&#2360;&#2381;&quot;&gt;&#2328;&#2344;&#2381;&#2335;&#2368; , &lt;/textarea&gt;
&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;"></iframe>
</div>

<video id="obj6724" playsinline="playsinline" class="SCPageObject SCView SCMovie"  controls="controls"   autoplay="autoplay" muted="muted"  >
	<source src="../video/38.mp4" type="video/mp4" />
	<div class="SCVideoFallback"><p>Your player does not support HTML5 video</p></div>
</video>






				
			</div>
			<div class="SCContentUnderlay">
				









			</div>
		</div>
		

		<script type="text/javascript">
			//<![CDATA[
			
			
			//]]>
		</script>
    </body>
 </html>
